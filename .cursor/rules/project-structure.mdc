---
alwaysApply: true
description: AI Brand Name Generator project structure and architecture
---

# AI Brand Name Generator - Project Structure

## Core Files
- [brand_name_generator.py](mdc:brand_name_generator.py) - Main Streamlit application with UI and AI integration
- [requirements.txt](mdc:requirements.txt) - Python dependencies for the project
- [README.md](mdc:README.md) - Project documentation and usage instructions

## Planning Documents
- [ENHANCEMENT_PLAN.md](mdc:ENHANCEMENT_PLAN.md) - UI/UX enhancement roadmap (10 improvements)
- [UNIQUENESS_IMPROVEMENT_PLAN.md](mdc:UNIQUENESS_IMPROVEMENT_PLAN.md) - Brand name uniqueness improvement strategies

## Architecture
- **Frontend**: Streamlit web interface with custom CSS styling
- **AI Integration**: Google Gemini 2.5 Flash model via google-generativeai
- **Export**: Excel file generation using pandas and openpyxl
- **Styling**: Blue color scheme (#1565C0, #90CAF9) matching Alwrity design system

## Key Functions
- `main()` - Streamlit app entry point and UI setup
- `generate_brand_names()` - AI prompt construction and name generation
- `gemini_text_response()` - Gemini API integration with retry logic

## Current Status
- Enhanced name display format implemented (card-based layout)
- Enhanced AI prompting strategy implemented (uniqueness focus)
- Ready for further improvements based on user feedback